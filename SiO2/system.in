

# ----------------- Init Section -----------------

include "system.in.init"


# ----------------- Atom Definition Section -----------------

read_data "system.data"

# ----------------- Settings Section -----------------

include "system.in.settings"


# ----------------- Run Section -----------------


velocity	all create 2000.0 277387 mom yes

neighbor	0.3 bin
neigh_modify	delay 10

fix nvt all nvt temp 500 500 1.0
#fix		1 all nve
thermo		10
timestep	0.1

dump myDump all atom 10 SiO2.dump
run 50


variable T equal 500
label meltingLoop
variable i loop 10
    fix nvt all nvt temp ${T} ${T} 1.0
    run 50
    compute msdID all msd
    dump dumpID all custom 50 msd.dump id msd
    #dump dumpID all custom 50 msd msd.dump
    uncompute msdID
    unfix nvt
    variable T equal ${T}+100
next i
jump SELF meltingLoop


# The lines above define the system you want to simulate.
# What you do next is up to you.
# Typically a user would minimize and equilibrate
# the system using commands similar to the following:
#  ----   examples   ----
#
#  -- minimize --
# minimize 1.0e-5 1.0e-7 1000 10000
# (Note: Some fixes, for example "shake", interfere with the minimize command,
#        You can use the "unfix" command to disable them before minimization.)
#  -- declare time step for normal MD --
# timestep 1.0
#  -- run at constant pressure (Nose-Hoover)--
# fix   fxnpt all npt temp 300.0 300.0 100.0 iso 1.0 1.0 1000.0 drag 1.0
#  -- ALTERNATELY, run at constant volume (Nose-Hoover) --
# fix   fxnvt all nvt temp 300.0 300.0 500.0 tchain 1
#  -- ALTERNATELY, run at constant volume using Langevin dynamics. --
#  -- (This is good for sparse CG polymers in implicit solvent.)   --
# fix fxLAN all langevin 300.0 300.0 5000 48279
# fix fxNVE all nve  #(<--needed by fix langevin)
#  -- Now, finally run the simulation --
# run   50000
#  ---- (end of examples) ----
