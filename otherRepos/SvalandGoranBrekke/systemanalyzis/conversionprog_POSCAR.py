# -*- coding: utf-8 -*-
"""
Created on Tue Feb  3 10:54:10 2015

@author: goran
"""

# coordinates transformation from POSCAR file

def layermodel_27layer():
    
    a0 = 1.0    
    a1 = [a0*10.0306,a0*0,a0*0]
    a2 = [a0*(-5.0153),a0*8.6868,a0*0]
    a3 = [a0*0,a0*0,a0*28.0893]
    O = 72
    Si = 36
    
    layermodel = [
    [0.0781, 0.3800, 0.3272],
    [0.0781, 0.8800, 0.3272],
    [0.5781, 0.3800, 0.3272],
    [0.5781, 0.8800, 0.3272],
    [0.1980, 0.1198, 0.2727],
    [0.1980, 0.6198, 0.2727],
    [0.6980, 0.1198, 0.2727],
    [0.6980, 0.6198, 0.2727],
    [0.3762, 0.0847, 0.3383],
    [0.3762, 0.5847, 0.3383],
    [0.8762, 0.0847, 0.3383],
    [0.8762, 0.5847, 0.3383],
    [0.2915, 0.4152, 0.2616],
    [0.2915, 0.9152, 0.2616],
    [0.7915, 0.4152, 0.2616],
    [0.7915, 0.9152, 0.2616],
    [0.1387, 0.2204, 0.3887],
    [0.1387, 0.7204, 0.3887],
    [0.6387, 0.2204, 0.3887],
    [0.6387, 0.7204, 0.3887],
    [0.4182, 0.2795, 0.2112],
    [0.4182, 0.7795, 0.2112],
    [0.9182, 0.2795, 0.2112],
    [0.9182, 0.7795, 0.2112],
    [0.4161, 0.2758, 0.4088],
    [0.4161, 0.7758, 0.4088],
    [0.9161, 0.2758, 0.4088],
    [0.9161, 0.7758, 0.4088],
    [0.1402, 0.2241, 0.1911],
    [0.1402, 0.7241, 0.1911],
    [0.6402, 0.2241, 0.1911],
    [0.6402, 0.7241, 0.1911],
    [0.2990, 0.3956, 0.4664],
    [0.2990, 0.8956, 0.4664],
    [0.7990, 0.3956, 0.4664],
    [0.7990, 0.8956, 0.4664],
    [0.4033, 0.1043, 0.1335],
    [0.4033, 0.6043, 0.1335],
    [0.9033, 0.1043, 0.1335],
    [0.9033, 0.6043, 0.1335],
    [0.1742, 0.0972, 0.4669],
    [0.1742, 0.5972, 0.4669],
    [0.6742, 0.0972, 0.4669],
    [0.6742, 0.5972, 0.4669],
    [0.0770, 0.4027, 0.1330],
    [0.0770, 0.9027, 0.1330],
    [0.5770, 0.4027, 0.1330],
    [0.5770, 0.9027, 0.1330],
    [0.1948, 0.2429, 0.5485],
    [0.1948, 0.7429, 0.5485],
    [0.6948, 0.2429, 0.5485],
    [0.6948, 0.7429, 0.5485],
    [0.4518, 0.2570, 0.0514],
    [0.4518, 0.7570, 0.0514],
    [0.9518, 0.2570, 0.0514],
    [0.9518, 0.7570, 0.0514],
    [0.4905, 0.4442, 0.5397],
    [0.4905, 0.9442, 0.5397],
    [0.9905, 0.4442, 0.5397],
    [0.9905, 0.9442, 0.5397],
    [0.0463, 0.0557, 0.0602],
    [0.0463, 0.5557, 0.0602],
    [0.5463, 0.0557, 0.0602],
    [0.5463, 0.5557, 0.0602],
    [0.2885, 0.0404, 0.5447],
    [0.2885, 0.5404, 0.5447],
    [0.7885, 0.0404, 0.5447],
    [0.7885, 0.5404, 0.5447],
    [0.2480, 0.4595, 0.0552],
    [0.2480, 0.9595, 0.0552],
    [0.7480, 0.4595, 0.0552],
    [0.7480, 0.9595, 0.0552],
    [0.2367, 0.9999, 0.2999],
    [0.2367, 0.4999, 0.2999],
    [0.7367, 0.9999, 0.2999],
    [0.7367, 0.4999, 0.2999],
    [0.0011, 0.2400, 0.3656],
    [0.0011, 0.7400, 0.3656],
    [0.5011, 0.2400, 0.3656],
    [0.5011, 0.7400, 0.3656],
    [0.2610, 0.2599, 0.2343],
    [0.2610, 0.7599, 0.2343],
    [0.7610, 0.2599, 0.2343],
    [0.7610, 0.7599, 0.2343],
    [0.2561, 0.2475, 0.4320],
    [0.2561, 0.7475, 0.4320],
    [0.7561, 0.2475, 0.4320],
    [0.7561, 0.7475, 0.4320],
    [0.0085, 0.2524, 0.1679],
    [0.0085, 0.7524, 0.1679],
    [0.5085, 0.2524, 0.1679],
    [0.5085, 0.7524, 0.1679],
    [0.3190, 0.4070, 0.5248],
    [0.3190, 0.9070, 0.5248],
    [0.8190, 0.4070, 0.5248],
    [0.8190, 0.9070, 0.5248],
    [0.4120, 0.0929, 0.0752],
    [0.4120, 0.5929, 0.0752],
    [0.9120, 0.0929, 0.0752],
    [0.9120, 0.5929, 0.0752],
    [0.1604, 0.0805, 0.5250],
    [0.1604, 0.5805, 0.5250],
    [0.6604, 0.0805, 0.5250],
    [0.6604, 0.5805, 0.5250],
    [0.0798, 0.4194, 0.0749],
    [0.0798, 0.9194, 0.0749],
    [0.5798, 0.4194, 0.0749],
    [0.5798, 0.9194, 0.0749]
    ]
    
    return a1,a2,a3,O,Si,layermodel

def layermodel_45layer():
    a0 = 1.0
    a1 = [a0*10.0306, a0*0.0000, a0*0.0000]
    a2 = [a0*(-5.0153), a0*8.6868, a0*0.0000]
    a3 = [a0*0.0000, a0*0.0000, a0*39.0961]
    O = 120 
    Si = 60
    
    layermodel = [
    [0.1037, 0.2289, 0.1538],
    [0.1037, 0.7289, 0.1538],
    [0.6037, 0.2289, 0.1538],
    [0.6037, 0.7289, 0.1538],
    [0.0779, 0.2060, 0.2964],
    [0.0779, 0.7060, 0.2964],
    [0.5779, 0.2060, 0.2964],
    [0.5779, 0.7060, 0.2964],
    [0.0774, 0.2050, 0.4365],
    [0.0774, 0.7050, 0.4365],
    [0.5774, 0.2050, 0.4365],
    [0.5774, 0.7050, 0.4365],
    [0.0995, 0.2202, 0.5749],
    [0.0995, 0.7202, 0.5749],
    [0.5995, 0.2202, 0.5749],
    [0.5995, 0.7202, 0.5749],
    [0.2451, 0.0370, 0.6872],
    [0.2451, 0.5370, 0.6872],
    [0.7451, 0.0370, 0.6872],
    [0.7451, 0.5370, 0.6872],
    [0.0071, 0.0596, 0.0604],
    [0.0071, 0.5596, 0.0604],
    [0.5071, 0.0596, 0.0604],
    [0.5071, 0.5596, 0.0604],
    [0.2538, 0.4161, 0.2051],
    [0.2538, 0.9161, 0.2051],
    [0.7538, 0.4161, 0.2051],
    [0.7538, 0.9161, 0.2051],
    [0.2425, 0.4224, 0.3429],
    [0.2425, 0.9224, 0.3429],
    [0.7425, 0.4224, 0.3429],
    [0.7425, 0.9224, 0.3429],
    [0.2385, 0.4223, 0.4824],
    [0.2385, 0.9223, 0.4824],
    [0.7385, 0.4223, 0.4824],
    [0.7385, 0.9223, 0.4824],
    [0.2563, 0.3924, 0.6311],
    [0.2563, 0.8924, 0.6311],
    [0.7563, 0.3924, 0.6311],
    [0.7563, 0.8924, 0.6311],
    [0.0367, 0.4064, 0.1129],
    [0.0367, 0.9064, 0.1129],
    [0.5367, 0.4064, 0.1129],
    [0.5367, 0.9064, 0.1129],
    [0.0274, 0.3661, 0.2489],
    [0.0274, 0.8661, 0.2489],
    [0.5274, 0.3661, 0.2489],
    [0.5274, 0.8661, 0.2489],
    [0.0275, 0.3697, 0.3895],
    [0.0275, 0.8697, 0.3895],
    [0.5275, 0.3697, 0.3895],
    [0.5275, 0.8697, 0.3895],
    [0.0360, 0.3832, 0.5321],
    [0.0360, 0.8832, 0.5321],
    [0.5360, 0.3832, 0.5321],
    [0.5360, 0.8832, 0.5321],
    [0.1514, 0.2392, 0.6899],
    [0.1514, 0.7392, 0.6899],
    [0.6514, 0.2392, 0.6899],
    [0.6514, 0.7392, 0.6899],
    [0.4125, 0.2608, 0.0542],
    [0.4125, 0.7608, 0.0542],
    [0.9125, 0.2608, 0.0542],
    [0.9125, 0.7608, 0.0542],
    [0.1530, 0.1167, 0.2120],
    [0.1530, 0.6167, 0.2120],
    [0.6530, 0.1167, 0.2120],
    [0.6530, 0.6167, 0.2120],
    [0.1577, 0.1298, 0.3545],
    [0.1577, 0.6298, 0.3545],
    [0.6577, 0.1298, 0.3545],
    [0.6577, 0.6298, 0.3545],
    [0.1611, 0.1339, 0.4952],
    [0.1611, 0.6339, 0.4952],
    [0.6611, 0.1339, 0.4952],
    [0.6611, 0.6339, 0.4952],
    [0.1300, 0.0936, 0.6313],
    [0.1300, 0.5936, 0.6313],
    [0.6300, 0.0936, 0.6313],
    [0.6300, 0.5936, 0.6313],
    [0.3642, 0.1076, 0.1131],
    [0.3642, 0.6076, 0.1131],
    [0.8642, 0.1076, 0.1131],
    [0.8642, 0.6076, 0.1131],
    [0.3164, 0.0776, 0.2617],
    [0.3164, 0.5776, 0.2617],
    [0.8164, 0.0776, 0.2617],
    [0.8164, 0.5776, 0.2617],
    [0.3197, 0.0772, 0.4013],
    [0.3197, 0.5772, 0.4013],
    [0.8197, 0.0772, 0.4013],
    [0.8197, 0.5772, 0.4013],
    [0.3374, 0.0838, 0.5390],
    [0.3374, 0.5838, 0.5390],
    [0.8374, 0.0838, 0.5390],
    [0.8374, 0.5838, 0.5390],
    [0.4472, 0.4404, 0.6837],
    [0.4472, 0.9404, 0.6837],
    [0.9472, 0.4404, 0.6837],
    [0.9472, 0.9404, 0.6837],
    [0.2085, 0.4631, 0.0569],
    [0.2085, 0.9631, 0.0569],
    [0.7085, 0.4631, 0.0569],
    [0.7085, 0.9631, 0.0569],
    [0.3796, 0.2798, 0.1693],
    [0.3796, 0.7798, 0.1693],
    [0.8796, 0.2798, 0.1693],
    [0.8796, 0.7798, 0.1693],
    [0.3725, 0.2947, 0.3077],
    [0.3725, 0.7947, 0.3077],
    [0.8725, 0.2947, 0.3077],
    [0.8725, 0.7947, 0.3077],
    [0.3716, 0.2940, 0.4476],
    [0.3716, 0.7940, 0.4476],
    [0.8716, 0.2940, 0.4476],
    [0.8716, 0.7940, 0.4476],
    [0.3745, 0.2711, 0.5903],
    [0.3745, 0.7711, 0.5903],
    [0.8745, 0.2711, 0.5903],
    [0.8745, 0.7711, 0.5903],
    [0.0404, 0.4233, 0.0711],
    [0.0404, 0.9233, 0.0711],
    [0.5404, 0.4233, 0.0711],
    [0.5404, 0.9233, 0.0711],
    [0.2215, 0.2605, 0.1852],
    [0.2215, 0.7605, 0.1852],
    [0.7215, 0.2605, 0.1852],
    [0.7215, 0.7605, 0.1852],
    [0.2124, 0.2628, 0.3253],
    [0.2124, 0.7628, 0.3253],
    [0.7124, 0.2628, 0.3253],
    [0.7124, 0.7628, 0.3253],
    [0.2121, 0.2634, 0.4654],
    [0.2121, 0.7634, 0.4654],
    [0.7121, 0.2634, 0.4654],
    [0.7121, 0.7634, 0.4654],
    [0.2141, 0.2445, 0.6064],
    [0.2141, 0.7445, 0.6064],
    [0.7141, 0.2445, 0.6064],
    [0.7141, 0.7445, 0.6064],
    [0.4700, 0.2556, 0.1377],
    [0.4700, 0.7556, 0.1377],
    [0.9700, 0.2556, 0.1377],
    [0.9700, 0.7556, 0.1377],
    [0.4489, 0.2365, 0.2788],
    [0.4489, 0.7365, 0.2788],
    [0.9489, 0.2365, 0.2788],
    [0.9489, 0.7365, 0.2788],
    [0.4492, 0.2369, 0.4188],
    [0.4492, 0.7369, 0.4188],
    [0.9492, 0.2369, 0.4188],
    [0.9492, 0.7369, 0.4188],
    [0.4607, 0.2395, 0.5589],
    [0.4607, 0.7395, 0.5589],
    [0.9607, 0.2395, 0.5589],
    [0.9607, 0.7395, 0.5589],
    [0.1168, 0.0768, 0.6730],
    [0.1168, 0.5768, 0.6730],
    [0.6168, 0.0768, 0.6730],
    [0.6168, 0.5768, 0.6730],
    [0.3727, 0.0967, 0.0712],
    [0.3727, 0.5967, 0.0712],
    [0.8727, 0.0967, 0.0712],
    [0.8727, 0.5967, 0.0712],
    [0.1883, 0.4948, 0.2317],
    [0.1883, 0.9948, 0.2317],
    [0.6883, 0.4948, 0.2317],
    [0.6883, 0.9948, 0.2317],
    [0.1869, 0.4997, 0.3721],
    [0.1869, 0.9997, 0.3721],
    [0.6869, 0.4997, 0.3721],
    [0.6869, 0.9997, 0.3721],
    [0.1933, 0.0051, 0.5124],
    [0.1933, 0.5051, 0.5124],
    [0.6933, 0.0051, 0.5124],
    [0.6933, 0.5051, 0.5124],
    [0.2757, 0.4034, 0.6729],
    [0.2757, 0.9034, 0.6729],
    [0.7757, 0.4034, 0.6729],
    [0.7757, 0.9034, 0.6729]
    ]   
    
    return a1,a2,a3,O,Si,layermodel
    
def readCONTCAR(path,filename):
    fullname = os.path.abspath(os.path.join(path,filename))
    ofile = open(fullname,'r')
    
    header = ofile.readline()
    factor = float(ofile.readline())
    aa = ofile.readline()
    a1 = aa.split()
    A1 = [float(a1[0]),float(a1[1]),float(a1[2])]

    aa = ofile.readline()
    a2 = aa.split()
    A2 = [float(a2[0]),float(a2[1]),float(a2[2])]

    aa = ofile.readline()
    a3 = aa.split()
    A3 = [float(a3[0]),float(a3[1]),float(a3[2])]
    
    atoms = ofile.readline()
    atoms = atoms.split()
    natoms = len(atoms)
    
    Natoms = ofile.readline()
    Natoms = Natoms.split()
    Na = []
    for i in range(natoms):
        Na.append(int(Natoms[i]))
    
    
    #print factor,atoms,Na,A1,A2,A3
    
    filetype = ofile.readline() # Direct
    
    q_oxygen = -1.05
    q_silicon = 2.1
    q_carbon = 1.0
    
    matrix = []
    if (filetype.strip() == "Direct"):
        direct_positions = []
        cartesian = []
        for line in ofile:
            pos = line.split()
            vec = [float(pos[0]),float(pos[1]),float(pos[2])]
            direct_positions.append(vec)
            
            x1 = A1[0]*vec[0] + A2[0]*vec[1] + A3[0]*vec[2] # x-coord
            x2 = A1[1]*vec[0] + A2[1]*vec[1] + A3[1]*vec[2] # y-coord
            x3 = A1[2]*vec[0] + A2[2]*vec[1] + A3[2]*vec[2] # z-coord
            x = [x1,x2,x3]
            cartesian.append(x)
            
        counter = 0
        for i in range(len(atoms)):
            atom = atoms[i]
            if (atom == 'O'): 
                q = q_oxygen
            elif (atom == 'C'): 
                q = q_carbon
            elif (atom == 'Si'):
                q = q_silicon
            
            for j in range(Na[i]):
                #print atom, counter
                #print counter, direct_positions[counter]
                #print "$atom:%s%g $mol:. @atom:%s %g %g %g %g" % (atom,j+1,atom,q,direct_positions[counter][0],direct_positions[counter][1],direct_positions[counter][2])
                print "$atom:%s%g $mol:. @atom:%s %g %g %g %g" % (atom,j+1,atom,q,cartesian[counter][0],cartesian[counter][1],cartesian[counter][2])                
                #print "$atom:%s%g @atom:%s %g %g %g" % (atom,j+1,atom,cartesian[counter][0],cartesian[counter][1],cartesian[counter][2])                
                counter += 1
                info = [counter,atom,cartesian[counter-1][0],cartesian[counter-1][1],cartesian[counter-1][2]]
                matrix.append(info)
    
    systemvectors = [A1,A2,A3]
    return systemvectors,matrix

def nearest_neighbours(Nnearest,Type1,Type2,matrix,systemvectors):
    '''
    Find Nneatest neighbours of Type2 closest to Type1.
    Matrix holds information about atomId,Type,x,y,z.
    nearest_neighbours() returns:
    '''

    # Remember! Triclinic minimum image convention!
    '''
    If |Δx|>0.5(amax−amin), then subtract off amax−amin if Δx>0, and add it for values less than zero.
    If |Δy|>0.5(bmax−bmin), then subtract off bmax−bmin if Δy>0, 
        and add it for values less than zero. Also add or subtract b1 from Δx.
    If |Δz|>0.5(cmax−cmin), then subtract off cmax−cmin if Δz>0, 
        and add it for values less than zero. Also add or subtract c1 from Δx and c2 from Δy.
    '''
    da = systemvectors[0][0]**2 + systemvectors[0][1]**2 + systemvectors[0][2]**2
    db = systemvectors[1][0]**2 + systemvectors[1][1]**2 + systemvectors[1][2]**2
    dc = systemvectors[2][0]**2 + systemvectors[2][1]**2 + systemvectors[2][2]**2
    
    lmatrix = len(matrix)
    for i in range(lmatrix):
        atomindex1 = matrix[i][0] 
        atomtype1 = matrix[i][1]
        a1 = matrix[i][2]; b1 = matrix[i][3]; c1 = matrix[i][4] 
        if (atomtype1 == Type1):
            for j in range(lmatrix):
                if (matrix[j][1] == Type2):
                    #calculate distance:
                    da = a1 - matrix[j][2]; db = b1 - matrix[j][3];dc = c1 - matrix[j][4]
                    
                    # minimum image convention triclinic system:
                    if (abs(da) > )
                    
def main():

    import numpy as np

    path  = '/home/goran/Downloads'
    #filename = 'CONTCAR - CO3_2'
    filename = '27layer_model_alpha_quartz.poscar'
    filename = 'POSCAR'
    
    systemvectors, matrix = readCONTCAR(path,filename)

    Nnearest = 2
    Type1 = 'Si'
    Type2 = 'O'
    nearest_neighbours(Nnearest,Type1,Type2,matrix,systemvectors)    
    
    '''
    x = [x1,x2,x3]
    x1 = a1[0]*x1_[0] + a2[0]*x1_[1] + a3[0]*x1_[2] # x-coord
    x2 = a1[1]*x1_[0] + a2[1]*x1_[1] + a3[1]*x1_[2] # y-coord
    x3 = a1[2]*x1_[0] + a2[2]*x1_[1] + a3[2]*x1_[2] # z-coord
    '''

    cartesian = []
    Type = 'O'
    ox = 0
    si = 0
    
    q_oxygen = -1.05
    q_silicon = 2.1
    q_carbon = 1.0
    
    '''
    #a1,a2,a3,O,Si,layermodel = layermodel_27layer() # get data from layermodel
    a1,a2,a3,O,Si,layermodel = layermodel_45layer() # get data from layermodel

    l = len(layermodel)
    print l
    for i in range(l):
        ox += 1
        x_ = layermodel[i]
        x1 = a1[0]*x_[0] + a2[0]*x_[1] + a3[0]*x_[2] # x-coord
        x2 = a1[1]*x_[0] + a2[1]*x_[1] + a3[1]*x_[2] # y-coord
        x3 = a1[2]*x_[0] + a2[2]*x_[1] + a3[2]*x_[2] # z-coord
        x = [x1,x2,x3]
        cartesian.append(x)
        q = q_oxygen
        if (i+1 > O ):
            q = q_silicon
            Type = 'Si'
            si += 1
            print "$atom:%s%g $mol:. @atom:%s %g %g %g %g" % (Type,si,Type,q,x1,x2,x3)
            #print (i+1),1,q,x1,x2,x3
            
        else:
            print "$atom:%s%g $mol:. @atom:%s %g %g %g %g" % (Type,ox,Type,q,x1,x2,x3)
            #print (i+1),2,q,x1,x2,x3
        
    '''
    
if __name__ == "__main__":
    import os
    main()
        
    
    